<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--Be sure to set name and use.libs before using this file.-->
<project default="create_jar" name="Generalized ANT Buildfile, modified for my WRF Runner project" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<!--ANT 1.9.1+ is required                                      -->
	<!--Most properties in this file have a default value, but can also be set from the command line.-->
	<!--When setting the prefix from the command line, it must include a trailing '/'.-->
	<!--When setting the .jar's name from the command line, it must include the '.jar' suffix.-->

	<!--Change this value to the desired name of the .jar file. Include the '.jar' suffix.-->
	<property unless:set="name" name="name" value="WRFRunner.jar" />

	<!--Change this value to true if the project uses external libraries.-->
	<!--This cannot be changed from the command line.-->
	<property name="use.libs" value="true" />

	<!--Change this value to true if the project is assuming Homebrew was used to install its libraries.-->
	<!--Note: Homebrew's brew command /must/ be on the user's PATH in order for this to work.-->
	<property unless:set="use.hombrew" name="use.homebrew" value="false" />

	<!--Path parameters.  These generally won't need to be changed-->
	<property unless:set="src" name="src" location="src" />
	<property unless:set="bin" name="bin" location="bin" />
	<property unless:set="doc" name="doc" value="doc" />
	<property unless:set="libs" name="libs" value="../" />
	<!--The path into which the .jar should be placed-->
	<property unless:set="prefix" name="prefix" value="../" />
	<!--Whether to force a complete rebuild every run-->
	<property unless:set="clean" name="clean" value="true" />
	
	<!--What to pack into the .jar in addition to the compiled code.-->
	<property unless:set="package.doc" name="package.doc" value="true" />
	<property unless:set="package.src" name="package.src" value="true" />
	<property unless:set="package.libs" name="package.libs" value="false" />

	<!--Construct the location of the output .jar file-->
	<property if:set="jar" name="jar" location="${jar}" />
	<property unless:set="jar" name="jar" location="${prefix}${name}" />

	<!--Convert the libs property to a location-->
	<property name="libs" location="${libs}" />

	<patternset id="libraries">
		<!--Add the names of the libraries to be included here.-->
		<include name="Structures.jar" />
		<include name="NamelistParser.jar" />
		<include name="Lexer.jar" />
		<include name="JSONLib.jar" />
	</patternset>

	<patternset id="Build Excludes">
		<!--Add the names of files to exclude from the src directory here.-->
		<exclude name="testCases/**" />
	</patternset>

	<target name="javadoc">
		<javadoc access="protected" author="true" destdir="${doc}" packagenames="*" source="1.8" splitindex="true" use="true" version="true">
			<fileset dir="${src}">
				<patternset refid="Build Excludes" />
			</fileset>
			<classpath if:true="${use.libs}" refid="build.classpath" />
		</javadoc>
	</target>

	<target name="build">
		<mkdir dir="${bin}" />
		<javac srcdir="${src}" destdir="${bin}" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source">
			<patternset refid="Build Excludes" />
			<classpath if:true="${use.libs}" refid="build.classpath" />
		</javac>
	</target>

	<target if="${use.homebrew}" name="find.brew">
		<exec unless:set="brew.path" executable="which" outputproperty="brew.path">
			<arg value="brew" />
		</exec>
		<exec unless:set="brew.prefix" executable="${brew.path}" outputproperty="brew.prefix">
			<arg value="--prefix" />
		</exec>
		<property name="build.libs" location="${brew.prefix}/lib/" />
	</target>
	
	<target if="${use.libs}" name="construct.classpath" depends="find.brew">
		<echo if:true="${use.homebrew}" level="info" message="Using libraries from homebrew." />
		<echo unless:true="${use.homebrew}" level="info" message="Using libraries from ${libs}" />
		<property unless:set="build.libs" name="build.libs" location="${libs}" />
		<path id="build.classpath">
			<fileset id="library" dir="${build.libs}">
				<patternset refid="libraries" />
			</fileset>
		</path>
		<pathconvert property="manifest.classpath" pathsep=" ">
		  <path refid="build.classpath"/>
		  <mapper>
		    <chainedmapper>
		       <flattenmapper/>
		       <globmapper from="*.jar" to="${libs}/*.jar"/>
		    </chainedmapper>
		  </mapper>
		</pathconvert>
	</target>

	<target name="create_jar" depends="construct.classpath,clean,javadoc,build">
		<jar destfile="${jar}" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="toberumono.wrf.Runner" />
				<attribute if:true="${use.libs}" name="Class-Path" value="${manifest.classpath}" />
				<attribute unless:true="${use.libs}" name="Class-Path" value="." />
			</manifest>
			<fileset dir="${bin}" />
			<fileset if:true="${package.doc}" dir="." includes="${doc}/**" />
			<fileset if:true="${package.src}" dir="${src}" />
			<restrict if:true="${package.libs}">
				<name regex=".*\.(class|java)" />
				<archives>
					<zips>
						<fileset refid="library" />
					</zips>
				</archives>
			</restrict>
		</jar>
	</target>

	<target name="clean" description="Remove all files created by the build process.">
		<echo unless:true="${clean}" level="info" message="Cleaning disabled." />
		<delete if:true="${clean}" dir="${bin}" />
		<delete if:true="${clean}" dir="${doc}" />
	</target>
</project>
